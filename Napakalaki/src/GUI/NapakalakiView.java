/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.awt.Component;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import napakalaki.CombatResult;
import napakalaki.Napakalaki;
import napakalaki.Treasure;

/**
 *
 * @author jose
 */
public class NapakalakiView extends javax.swing.JFrame {

    private Napakalaki napakalakiModel;

    /**
     * Creates new form NapakalakiView
     */
    public NapakalakiView() {
        
        setContentPane(new JLabel(new ImageIcon("resources/taverna.jpg")));
        initComponents();
        setExtendedState(java.awt.Frame.MAXIMIZED_BOTH);
    }

    public void setNapakalaki(Napakalaki napakalakiModel) {
        this.napakalakiModel = napakalakiModel;
        nextturn.setEnabled(false);
        playerView1.setPlayer(this.napakalakiModel.getCurrentPlayer());
        monsterView1.setMonster(this.napakalakiModel.getCurrentMonster());
    }

    public ArrayList<Treasure> getSelectedTreasures(JPanel aPanel) {
        TreasureView tv;
        ArrayList<Treasure> output = new ArrayList();
        for (Component c : aPanel.getComponents()) {
            tv = (TreasureView) c;
            if (tv.isSelected()) {
                output.add(tv.getTreasure());
            }
        }
        
        return output;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        monsterView1 = new GUI.MonsterView();
        MakeVisible = new javax.swing.JButton();
        playerView1 = new GUI.PlayerView();
        discardTreasures = new javax.swing.JButton();
        buyLevels = new javax.swing.JButton();
        combat = new javax.swing.JButton();
        nextturn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(132, 207, 141));

        monsterView1.setBackground(new java.awt.Color(128, 64, 1));

        MakeVisible.setText("Make Visible");
        MakeVisible.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MakeVisibleActionPerformed(evt);
            }
        });

        discardTreasures.setText("Discard Treasures");
        discardTreasures.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discardTreasuresActionPerformed(evt);
            }
        });

        buyLevels.setText("Buy Levels");
        buyLevels.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyLevelsActionPerformed(evt);
            }
        });

        combat.setText("Combat");
        combat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combatActionPerformed(evt);
            }
        });

        nextturn.setText("Next Turn");
        nextturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextturnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(monsterView1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(combat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buyLevels, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(discardTreasures, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(MakeVisible, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nextturn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(38, 38, 38)))
                .addComponent(playerView1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(358, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(playerView1, javax.swing.GroupLayout.PREFERRED_SIZE, 591, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(monsterView1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(MakeVisible)
                        .addGap(18, 18, 18)
                        .addComponent(discardTreasures)
                        .addGap(18, 18, 18)
                        .addComponent(buyLevels)
                        .addGap(18, 18, 18)
                        .addComponent(combat)
                        .addGap(18, 18, 18)
                        .addComponent(nextturn)))
                .addContainerGap(151, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MakeVisibleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MakeVisibleActionPerformed
        ArrayList<Treasure> selHidden = getSelectedTreasures (playerView1.getHiddenTreasures());
        napakalakiModel.makeTreasuresVisible (selHidden);
        playerView1.setPlayer(napakalakiModel.getCurrentPlayer());
    }//GEN-LAST:event_MakeVisibleActionPerformed

    private void discardTreasuresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discardTreasuresActionPerformed
        ArrayList<Treasure> selVisible = getSelectedTreasures (playerView1.getVisibleTreasures());
        napakalakiModel.discardVisibleTreasures(selVisible);
        ArrayList<Treasure> selHidden = getSelectedTreasures (playerView1.getHiddenTreasures());
        napakalakiModel.discardHiddenTreasures(selHidden);
        playerView1.setPlayer(napakalakiModel.getCurrentPlayer());
    }//GEN-LAST:event_discardTreasuresActionPerformed

    private void buyLevelsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyLevelsActionPerformed
        ArrayList<Treasure> selVisible = getSelectedTreasures (playerView1.getVisibleTreasures());
        ArrayList<Treasure> selHidden = getSelectedTreasures (playerView1.getHiddenTreasures());
        napakalakiModel.buyLevels(selVisible, selHidden);        
        playerView1.setPlayer(napakalakiModel.getCurrentPlayer());
    }//GEN-LAST:event_buyLevelsActionPerformed

    private void combatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combatActionPerformed
        CombatResult resultado = napakalakiModel.developCombat();
        if(resultado == CombatResult.Lose){
            JOptionPane.showMessageDialog(null, "Pierdes el combate", "Resultado del Combate", JOptionPane.INFORMATION_MESSAGE);          
        }
        if(resultado == CombatResult.LoseAndConvert){
            JOptionPane.showMessageDialog(null, "Pierdes y te conviertes en cultista", "Resultado del Combate", JOptionPane.INFORMATION_MESSAGE);
        }
        if(resultado == CombatResult.LoseAndDie){
            JOptionPane.showMessageDialog(null, "Mueres", "Resultado del Combate", JOptionPane.INFORMATION_MESSAGE);
        }
        if(resultado == CombatResult.LoseAndEscape){           
            JOptionPane.showMessageDialog(null, "Pierdes y escapas", "Resultado del Combate", JOptionPane.INFORMATION_MESSAGE);
        }
        if(resultado == CombatResult.Win){
            JOptionPane.showMessageDialog(null, "Ganas el combate", "Resultado del Combate", JOptionPane.INFORMATION_MESSAGE);
        }
        if(resultado == CombatResult.WinAndWinGame){
            JOptionPane.showMessageDialog(null, "Ganas el JUEGO", "Resultado del Combate", JOptionPane.INFORMATION_MESSAGE);
            //Desactivacion de botones
            MakeVisible.setEnabled(false);
            buyLevels.setEnabled(false);
            combat.setEnabled(false);
            discardTreasures.setEnabled(false);
            nextturn.setEnabled(false);
        }
        if (resultado != CombatResult.WinAndWinGame){
            nextturn.setEnabled(true);
        }
        playerView1.setPlayer(napakalakiModel.getCurrentPlayer());        
        //monsterView1.setMonster(this.napakalakiModel.getCurrentMonster());
        combat.setEnabled(false);
    }//GEN-LAST:event_combatActionPerformed

    private void nextturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextturnActionPerformed
        if(napakalakiModel.nextTurn()){        
            playerView1.setPlayer(this.napakalakiModel.getCurrentPlayer());
            monsterView1.setMonster(this.napakalakiModel.getCurrentMonster());
            combat.setEnabled(true);        
            nextturn.setEnabled(false);
        }
        else{
            if(napakalakiModel.getCurrentPlayer().getHiddenTreasures().size() > 4)
                JOptionPane.showMessageDialog(null, "No puedes pasar de turno, descarta cartas ocultas", "NO PUEDES PASAR", JOptionPane.ERROR_MESSAGE);
            else
                JOptionPane.showMessageDialog(null, "No puedes pasar de turno, comprueba el BadStuff","NO PUEDES PASAR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_nextturnActionPerformed

    public void showView() {
        this.setVisible(true);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton MakeVisible;
    private javax.swing.JButton buyLevels;
    private javax.swing.JButton combat;
    private javax.swing.JButton discardTreasures;
    private GUI.MonsterView monsterView1;
    private javax.swing.JButton nextturn;
    private GUI.PlayerView playerView1;
    // End of variables declaration//GEN-END:variables
}
